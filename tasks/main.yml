---

- name: Load settings based on distribution
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: "Enable PowerTools RPM Repository"
  ini_file:
    path: /etc/yum.repos.d/CentOS-PowerTools.repo
    section: PowerTools
    option: enabled
    value: '1'
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int >= 8 and ansible_distribution_major_version|int <= 20

- name: Install common and builder-specific packages
  package:
    name: "{{ package_list['common'] + package_list[builder] }}"
    state: present

- name: Install more packages for Fedora
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - redhat-rpm-config
  when: ansible_distribution == 'Fedora' and ansible_distribution_major_version|int >= 23

- name: Define checkout directory
  set_fact:
    checkout_dir: "/srv/builder/{{ builder_name }}"

- name: Deploy the build script
  template:
    dest: /usr/local/bin/build_deploy.py
    src: build_deploy.py
    mode: 0755
    owner: root
    group: root

- name: Create {{ builder_username }} to build
  user:
    name: "{{ builder_username }}"
    comment: "Static builder user"
    generate_ssh_key: yes
    home: "/srv/builder"
    ssh_key_file: "/srv/builder/.ssh/{{ builder_name }}_id.rsa"
  register: result

# needed so NRPE can check log
- name: Fix directory permission for NRPE
  file:
    path: "/srv/builder"
    mode: 0755
    state: directory

# not before the homedir is created
- name: "Prepare builder software manually"
  block:
    - name: "Install builder's repository"
      git:
        repo: "{{ builder_repo[builder].url }}"
        dest: "/srv/builder/{{ builder_repo[builder].subdest }}"
        version: "{{ builder_repo[builder].version | default('HEAD') }}"
        update: yes
        force: yes
    - name: "Setup writable directories in builder's repository"
      file:
        path: "/srv/builder/{{ builder_repo[builder].subdest }}/{{ item }}"
        owner: '{{ builder_username }}'
        group: '{{ builder_username }}'
        recurse: yes
      with_items: "{{ builder_repo[builder].writable_subdirs | default([]) }}"
  when: builder_repo[builder] is defined

- name: Clone git repo {{ git_url }}
  git:
    repo: "{{ git_url }}"
    dest: "{{ checkout_dir }}"
    version: "{{ git_version | default( 'HEAD' ) }}"
    force: yes   # needed because of submodules to avoid "Local modifications exist in repository"
    umask: '0022'
  become: yes
  become_user: '{{ builder_username }}'
  become_method: 'su'
  register: git_res
  # remote_url_changed is not always defined
  changed_when: (git_res.remote_url_changed | default(false)) or (git_res.after != git_res.before)

- name: Check if a Gemfile is present
  stat:
    path: "{{ checkout_dir }}/Gemfile"
  register: gemfile_st

- name: Install gems required to build
  command: "bundle install --path ~/.gem"
  args:
    chdir: "{{ checkout_dir }}"
  become: yes
  become_user: '{{ builder_username }}'
  become_method: 'su'
  changed_when: False
  when: gemfile_st.stat.exists

# after workdir is setup as it might use it
- name: "Extra builder setup"
  command: "{{ item }}"
  args:
    chdir: "{{ checkout_dir }}"
  become: yes
  become_user: '{{ builder_username }}'
  become_method: 'su'
  changed_when: False
  loop: "{{ builder_setup[builder] | default([]) }}"

- name: Clear RSYNC URL
  set_fact:
    rsync_url: "nosync"

- name: "Compute RSYNC URL (remote)"
  set_fact:
    rsync_url: "{{ rsync_user }}@{{ rsync_server }}:{{ rsync_location }}"
  when: rsync_location is defined and rsync_server is defined and rsync_user is defined

- name: "Compute RSYNC URL (local)"
  set_fact:
    rsync_url: "{{ rsync_location }}"
  when: rsync_location is defined and rsync_server is undefined and rsync_user is undefined

- name: Deploy yaml config for {{ builder_name }}
  template:
    dest: "/srv/builder/{{ builder_name }}.yml"
    src: builder.yml.j2

- name: Install Rsync
  package:
    name: "{{ rsync_package }}"
    state: present
  when: rsync_url != 'nosync'

- name: "Schedule build and sync"
  include_tasks: schedule_build_and_sync.yml
  when: (tests_is_container is defined) | ternary(not tests_is_container, ansible_env.container is undefined)

- name: "Build now (container)"
  include_tasks: build.yml
  when: ((tests_is_container is defined) | ternary(tests_is_container, ansible_env.container is defined)) and builder_container_build_now|bool

